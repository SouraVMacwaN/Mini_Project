#include <stdio.h>
#include<graphics.h>
#include<conio.h>
#include <string.h>
char trial[20] = "FAILED";
void lines()
{
  setcolor(3);
  //vertical lines

  line(5,330,5,100);
  line(5,370,5,420);
  line(130,290,130,370);
  line(70,225,70,155);
  line(130,100,130,170);
  line(280,370,280,180);
  line(330,180,330,290);
  line(420,290,420,420);
  line(420,100,420,250);
  line(205,225,205,300);
  line(330,420,330,350);

  //horizontal lines

  line(5,100,420,100);
  line(330,350,370,350);
  line(420,200,380,200);
  line(5,330,70,330);
  line(5,370,70,370);
  line(70,290,130,290);
  line(5,225,205,225);
  line(130,370,280,370);
  line(280,180,330,180);
  line(330,290,420,290);
  line(420,420,5,420);
  setcolor(WHITE);
  }
void ball(int j,int k,int l)                      //ball
{
    circle(j,k,l);
    setcolor(CYAN);
    setfillstyle(SOLID_FILL,14);
    floodfill(j,k,WHITE);
    setcolor(2);
    circle(420,270,5);

}
int condition(int j,int k)
{
							       //vertical lines

  if(j== 10 && k >= 100 && k <= 330){return 1;}
  if(j== 10 && k >= 370 && k <= 420){return 1;}
  if(k >= 290 && k <= 370){
	if(j == 125 || j == 135) return 1;
  }
  if(k >= 155 && k <= 225){
  if(j== 65 || j == 75)return 1;
  }
  if(k >= 100 && k <= 170){
  if(j == 135 || j == 125)return 1;
  }
  if(k >= 180 && k <= 370){
    if(j == 285 || j == 275)return 1;
    }
  if(k >= 180 && k <= 290){
    if(j == 335 || j == 325)return 1;
    }
  if(j== 415 && k >= 290 && k <= 420){return 1;}
  if(j== 415 && k >= 100 && k <= 250){return 1;}
  if(k >= 225 && k <= 300){
    if(j == 210 || j == 200)return 1;
    }
  if(k >= 350 && k <= 420){
    if(j == 335 || j == 325)return 1;}

							    //horizontal lines

  if(j>=5 && j<=420){
    if(k == 95 || k == 105)return 1;
  }
  if(j>=330 && j<=370){
    if(k == 355 || k == 345)return 1;
  }
  if(j>380 && j<=420){
    if(k == 205 || k == 195)return 1;
  }
  if(j>=5 && j<=70){
    if(k == 335 || k == 325)return 1;
  }
  if(j>=5 && j<=70){
    if(k == 375 || k == 365)return 1;
  }
  if(j>=70 && j<=130){
    if(k == 295 || k == 285)return 1;
  }
  if(j>=5 && j<=205){
    if(k == 230 || k == 220)return 1;
  }
  if(j>=130 && j<=280){
    if(k == 375 || k == 365)return 1;
  }
  if(j>=280 && j<=330){
    if(k == 175 || k == 185)return 1;
  }
  if(j>=330 && j<=420){
    if(k == 295 || k == 285)return 1;
  }
  if(j>=5 && j<=420){
    if(k == 420 )return 1;
  }
  if(j == 420 && k == 270)
  {
  strcpy(trial, "SUCCESS");
  return 1;
  }
  return 0;
}

void score_TOTAL(int score)                         //score
{
  char str[100];
  setcolor(13);
  settextstyle(0,HORIZ_DIR,2);
   outtextxy(450,200,"Score: ");
   sprintf(str,"%d",score);
    outtextxy(550,200,str);
}

void backend()                                  //back
{
int j=20,k=350,l=5,score = 0;
 char c,ch,str[100];
 cleardevice();
 while(1){
 setcolor(13);
 settextstyle(3,HORIZ_DIR,8);
 outtextxy(100,170,"Maze Runner");
 settextstyle(0,HORIZ_DIR,0);
 setcolor(9);
 outtextxy(200,400,"Press 'space' to play the level");
 ch = getch();
 if(ch==' ') break;
 getch();
  }
  cleardevice();
  while(1)
  {
    setcolor(13);
    settextstyle(0,HORIZ_DIR,0);
    outtextxy(200,100,"Rules :");
    outtextxy(200,150,"1. Each move counts as 5 points");
     outtextxy(200,180,"2. Get least amount of points");
      outtextxy(200,210,"3. Donot touch the lines");
 setcolor(9);
 outtextxy(200,400,"Press 'space' to play the level");
 ch = getch();
 if(ch==' ') break;
 getch();
  }
  cleardevice();
  score_TOTAL(score);
 lines();
 ball(j,k,l);
 while(1)
 {
  if(condition(j,k) == 1){break;}
c=getch();
cleardevice();
 if(c=='a')
 {j-=5;score+=5;}
 if(c=='s')
 {k+=5;score+=5;}
 if(c=='d')
 {j+=5;score+=5;}
 if(c=='w')
 {k-=5;score+=5;}
 if(c==' ') break;
score_TOTAL(score);
lines();
ball(j,k,l);
 }
 while(1)
 {
   cleardevice();
   setcolor(13);
  settextstyle(0,HORIZ_DIR,2);
    sprintf(str,"%d",score);
  outtextxy(200,200,"Total Score = ");
   outtextxy(420,200,str);
   setcolor(7);
   outtextxy(280,100,trial);
   settextstyle(0,HORIZ_DIR,0);
   setcolor(7);
   outtextxy(230,400,"Press 'space'twice to exit");
   ch = getch();
   if(ch==' ') break;

 }
}
void main()
{

    int d=DETECT,g;
    initgraph(&d,&g,"C:\\TURBOC3\\BGI");
    backend();
    getch();
    closegraph();
}
